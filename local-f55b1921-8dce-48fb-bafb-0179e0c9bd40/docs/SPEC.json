{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#1e90ff", "player_2": "#ff8c00"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Color Cascade Grid", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Swap adjacent tokens on a 7x7 grid to form color streaks in rows or columns; streaks clear and colors cascade to fill gaps. The AI introduces color goblins that reseed colors to complicate future moves.", "session_minutes": [5, 60]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output MUST define a deterministic outcome for every valid input; illegal actions MUST yield an error with { errorCode, message }.", "type": "core"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple swap-evaluation heuristic.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate minimax with limited depth and pruning.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced search (e.g., MCTS or full-depth minimax with heuristics).", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [7, 7]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#1e90ff", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 7, "grid": "2D array of 7x7 cells; each cell stores a color_id or null for empty", "rows": 7}, "initial_state": {}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": "int (1 or 2)"}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; update last_move; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND move is valid per mechanics.move_validation", "parameters": ["fromRow", "fromCol", "toRow", "toCol"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "7x7 grid seeded with colored tokens; colors drawn from a fixed palette; board starts fully occupied with no input from UI.", "starting_player_rule": "human"}, "capture": {"type": "piece_removal", "result": "All cells forming a streak of length >= 3 in any row or column are removed (set to empty). Subsequent cascades apply gravity to fill gaps and colors may reseed via goblins.", "directions": ["horizontal", "vertical"], "chain_capture": "true", "min_chain_length": "3", "require_sandwich": "false", "capture_algorithm": {"name": "remove_streaks_and_cascade", "steps": ["Identify all horizontal and vertical streaks of length >= min_chain_length", "Remove all cells in identified streaks (set to empty)", "Apply gravity to collapse tokens downward if gravity is enabled", "If goblins trigger reseed, recolor a subset of empty cells with new colors"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"gravity": "true", "directions": ["horizontal", "vertical"], "min_chain_length": "3"}}}, "scoring": {"method": "count_pieces", "winner_determination": "At end of game, the player with more tokens on the board is the winner; if equal, it's a draw."}, "movement": {"range": 1, "allowed": "swap", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["target must be adjacent to the selected token", "swap must produce at least one horizontal or vertical color streak of length >= 3", "resulting state must be deterministic and replayable"], "must_place_on_empty": false, "validation_algorithm": {"name": "swap_and_pattern_check", "steps": ["Ensure a token is selected by current player", "Check target cell is within 1-step Manhattan distance and is a neighbor", "Simulate swapping the two tokens", "Scan rows and columns for any streaks of a single color with length >= 3", "If at least one streak exists, mark as valid and provide affected area as preview", "If no streaks, mark as invalid with appropriate error"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": "true", "directions": ["up", "down", "left", "right"], "require_bounded": "true", "min_chain_length": "3"}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Captured pieces removed and board cascades deterministically", "when": "Player performs a capturing move", "given": "A valid capture exists per game rules"}, {"then": "AI uses simple algorithm, makes valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST avoid blocking human's obvious winning move if rule requires it (deterministic play)", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "player_tokens_count == 0 AND ai_tokens_count > 0", "check_logic": "Count tokens of each color on the board; if all AI color tokens remain and Player color tokens are zero, AI loses; reported as player win."}], "draw": [{"priority": "end_turn", "condition": "no legal moves exist for both players", "check_logic": "Deterministic legal-move scan; if zero moves for both sides, declare draw."}, {"priority": "end_turn", "condition": "token counts equal and no further captures possible", "check_logic": "Compare counts; if equal and no moves/captures left, declare draw."}], "lose": [{"priority": "immediate", "condition": "ai_tokens_count == 0 AND player_tokens_count > 0", "check_logic": "Count tokens of each color on the board; if all Player color tokens remain and AI color tokens are zero, AI wins."}]}}