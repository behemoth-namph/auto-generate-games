{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Checkers", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Two-player checkers on an 8x8 board where pieces move diagonally, capture by jumping opponent pieces, and promote to kings; you select a piece by clicking it, then click a valid destination to move; captures are forced when available and AI uses a simple rule-based strategy.", "session_minutes": [15, 60]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output (MUST) describing a game action's validity and effect.", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple rule-based evaluation focusing on capturing when available and advancing toward opponent.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST consider basic piece safety and king potential in its chosen capture/move sequence.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST implement more advanced heuristics (positional value, king safety) within the deterministic rules.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": "for grid: directions list; for hex: 6 directions; for graph: adjacency function", "dimensions": [8, 8]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "dark", "pieces_played": 0, "player_number": 1}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 1, "algorithm": "rule_based", "difficulty": "easy", "is_thinking": false, "player_number": 2, "response_delay_ms": 500}, "initial_state": {"depth": 1, "algorithm": "rule_based", "difficulty": "easy", "is_thinking": false, "time_budget_ms": 2000, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 8, "grid": "8x8 grid with pieces placed on dark squares; internal representation as 2D array of cells with pieceId or null", "rows": 8}, "initial_state": {"grid": [[null, 20001, null, 20002, null, 20003, null, 20004], [20005, null, 20006, null, 20007, null, 20008, null], [null, 20009, null, 20100, null, 20101, null, 20102], [null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null], [10001, null, 10002, null, 10003, null, 10004, null], [null, 10005, null, 10006, null, 10007, null, 10008], [10009, null, 10100, null, 10101, null, 10102, null]], "placement": "Standard starting position: AI on dark squares rows 0-2; human on dark squares rows 5-7; light squares empty."}}, {"name": "Game", "properties": {"status": "playing", "last_move": {}, "move_count": 0, "current_player": 1}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND move is valid", "parameters": ["sourceRow", "sourceCol", "destRow", "destCol"]}, {"name": "ai_move", "result": "AI calculates move using rule_based logic; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Each side starts with 12 pieces on dark squares of the first three rows (AI on top, human on bottom). Pieces move diagonally forward; kings are promoted on reaching the far rank.", "starting_player_rule": "human"}, "capture": {"type": "jump_capture", "result": "Captured opponent piece(s) removed; if piece reaches far rank, promote to king; turn ends or continues if multi-capture path available", "directions": ["NW", "NE", "SW", "SE"], "chain_capture": true, "min_chain_length": 1, "require_sandwich": true, "capture_algorithm": {"name": "execute_jump_chain", "steps": ["Validate initial jump capture path", "Apply capture by removing jumped piece", "Move capturing piece to landing square", "If further captures are available for that piece, continue chain", "Promote to king if landing on back rank"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"updated_board": "object", "affected_count": "int"}, "parameters": {"directions": ["NW", "NE", "SW", "SE"], "require_bounded": true, "min_chain_length": 1}}}, "scoring": {"method": "count_pieces", "winner_determination": "Player with at least one piece remaining when opponent cannot move; otherwise the player with more pieces when game ends"}, "movement": {"range": "step: 1 (diagonal forward for men, both directions for kings); jump: 2 (capture over adjacent opponent into empty landing)", "allowed": "step|jump|slide", "directions": ["NW", "NE", "SW", "SE"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after no valid moves for both sides", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["current_player owns the moving piece", "destination is a dark square", "destination square is empty", "move is either a single-diagonal step (for non-king) or a capturing jump sequence", "if any capture is available for the current player, only capture moves are valid"], "must_place_on_empty": true, "validation_algorithm": {"name": "grid_scan", "steps": ["Compute all legal moves for current_player from board state", "If any capture moves exist, filter to captures only", "Verify destination coordinates exist and are empty", "Return is_valid and possible preview for UI hints"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["NW", "NE", "SW", "SE"], "require_bounded": true, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Captured pieces/cards/territory update exactly as defined", "when": "Player performs a capturing move", "given": "A valid capture exists per game rules"}, {"then": "AI uses simple rule-based approach and moves within 2 seconds", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST block human's winning move if possible", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "AI_pieces == 0 OR AI_no_legal_moves", "check_logic": "If the opponent (AI) has zero pieces or cannot make a legal move on the human turn, human wins."}], "draw": [{"priority": "end_turn", "condition": "no_legal_moves_for_both_players", "check_logic": "Stalemate when neither side has a legal move on their turn; no captures available and no progress possible"}], "lose": [{"priority": "immediate", "condition": "Player_pieces == 0 OR Player_no_legal_moves", "check_logic": "If the human player cannot move or has zero pieces, AI wins."}]}}