{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#1e90ff", "player_2": "#ff4500"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Gridlock Grand Prix", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Click a token to move to an adjacent empty cell or drag along a straight path toward a finish line; AI drivers place roadblocks to slow opponents.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output MUST define a deterministic input/output behavior.", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple heuristic that places blocks and moves tokens with minimal lookahead.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate heuristic with limited search depth.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced planning strategy with deeper search and pruning.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [8, 8]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#1e90ff", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 8, "grid": "8x8 grid with coordinates; each cell may hold a piece or be empty", "rows": 8}, "initial_state": {}}, {"name": "Game", "properties": {"status": "playing", "last_move": null, "move_count": 0, "current_player": 1}, "initial_state": {"status": "playing", "last_move": null, "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND moves_are_legal", "parameters": ["from", "to"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Human tokens placed on their starting edge; AI tokens placed on the opposite edge. Each player starts with a fixed number of tokens (e.g., 4) distributed along their starting row.", "starting_player_rule": "human"}, "capture": {"type": "block_placement", "result": "AI may place roadblocks on empty cells to slow or block opposing tokens", "directions": ["up", "down", "left", "right"], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "apply_roadblocks", "steps": ["Mark selected cells as blocked for the remainder of the game or until cleared by a rule", "Update affected movement paths for affected tokens"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"blocked_count": "int"}, "parameters": {"directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 0}}}, "scoring": {"method": "points", "winner_determination": "The first player to reach their finish line wins; if both reach on the same turn, compare points; if neither reaches finish, higher point total wins; draw if tied and no further moves"}, "movement": {"range": "any", "allowed": "step|slide", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["ownership_check: action must target a token owned by current_player", "adjacency_or_path_check: destination must be adjacent or reachable via a straight path without obstacles", "destination_empty: target cell must be empty", "block_visibility_check: no hidden blocks on path"], "must_place_on_empty": true, "validation_algorithm": {"name": "path_and_adjacency_check", "steps": ["Confirm current_player owns the token at source", "If destination is adjacent, allow when empty", "If destination is further along a straight line, ensure all intermediate cells are empty and path is straight", "Return is_valid and preview of move"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"range": "any", "directions": ["up", "down", "left", "right"], "min_distance": 1, "require_bounded": false}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Captured pieces/territory updated exactly as defined", "when": "Player performs a capturing move", "given": "A valid capture exists per game rules"}, {"then": "AI uses simple algorithm, makes valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute winning move", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST block human's winning move", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "human_finish_reached", "check_logic": "Any human token occupies any human finish line cell"}], "draw": [{"priority": "end_turn", "condition": "no_legal_moves_or_time_out", "check_logic": "At start of a turn, if current player has no legal moves and the opponent also has none, declare draw"}], "lose": [{"priority": "immediate", "condition": "ai_finish_reached", "check_logic": "Any AI token occupies its finish line cell"}]}}