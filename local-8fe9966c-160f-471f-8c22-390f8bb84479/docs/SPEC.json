{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Reversi (Othello)", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Players take turns placing discs to sandwich the opponent's discs between their own along straight or diagonal lines; sandwiched discs flip to the current player's color. The game ends when the board is full or no moves remain, and the winner is the player with more discs.", "session_minutes": [10, 60]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output (use MUST/SHOULD/CAN)", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple evaluation heuristic and return a valid move within the time limit.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate-depth search with pruning strategy.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced evaluation and look-ahead strategy to prioritize flips and stability.", "type": "core"}], "state": {"board": {"id": "board-8x8", "cols": 8, "rows": 8, "tags": ["board", "reversi", "grid", "8x8"], "type": "grid", "coord": [0, 0], "topology": "square", "neighbors": ["N", "NE", "E", "SE", "S", "SW", "W", "NW"], "dimensions": [8, 8], "occupantId": null, "visibility": "public"}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "black", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"id": 2, "type": "ai", "color": "white", "depth": 4, "owner": 2, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"id": 2, "depth": 4, "owner": 2, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 8, "grid": "8x8 grid with 64 cells; each cell can be empty or contain a disc of a color", "rows": 8}, "initial_state": {"cells": [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 2, 0, 0, 0], [0, 0, 0, 2, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": "int (1 or 2)"}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND [move validity conditions]", "parameters": ["row", "col"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": [], "timeout_ms": 2000}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30, "ai_move_time_limit_ms": 2000}, "config": {"seed": 123456789, "show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "ai_move_time_limit_ms": 2000, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Place four discs at the center in a diagonal pattern: positions (3,3)=Black, (3,4)=White, (4,3)=White, (4,4)=Black.", "starting_player_rule": "human"}, "capture": {"type": "line_flipping", "result": "All opponent discs sandwiched along valid directions are flipped to current player's color.", "directions": ["N", "NE", "E", "SE", "S", "SW", "W", "NW"], "chain_capture": true, "min_chain_length": 1, "require_sandwich": true, "capture_algorithm": {"name": "apply_line_flips", "steps": ["For each direction, walk from placed disc outward", "If a consecutive run of opponent discs ends with a current-player disc, flip all in that run", "Repeat for all directions"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"directions": ["N", "NE", "E", "SE", "S", "SW", "W", "NW"], "require_bounded": true, "min_chain_length": 1}}}, "scoring": {"method": "count_pieces", "winner_determination": "At end of game, compare counts; higher count wins; if equal, draw"}, "movement": {"range": 1, "allowed": "placement", "directions": ["N", "NE", "E", "SE", "S", "SW", "W", "NW"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["creates at least one sandwich of opponent discs in any direction"], "must_place_on_empty": true, "validation_algorithm": {"name": "grid_scan", "steps": ["Ensure target cell is empty", "For each of 8 directions, scan contiguous opponent discs followed by a current-player disc", "If at least one direction yields a sandwich, mark move valid and capture preview"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["N", "NE", "E", "SE", "S", "SW", "W", "NW"], "require_bounded": true, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Move is legal only if it flips at least one disc; state updates accordingly", "when": "Human action performed", "given": "Initial state description"}, {"then": "Captured discs are flipped exactly as defined by capture rules", "when": "Player performs a capturing move", "given": "A valid capture exists per game rules"}, {"then": "AI uses simple heuristic and makes a valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST attempt to select a move that leads to a winning end state if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST block or choose the best defensive move when appropriate", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "end_turn", "condition": "player1_pieces > player2_pieces", "check_logic": "Count discs at end of game; determine winner"}], "draw": [{"priority": "end_turn", "condition": "player1_pieces == player2_pieces", "check_logic": "Count discs at end of game; determine draw"}], "lose": [{"priority": "end_turn", "condition": "player1_pieces < player2_pieces", "check_logic": "Count discs at end of game; determine loser"}]}}