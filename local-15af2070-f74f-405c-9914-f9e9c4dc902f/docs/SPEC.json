{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner message"], "board_style": {"cell_size": 64, "tile_colors": {"empty": "#00000000", "default": "#2a64c7", "numbers": "#ffffff", "outline": "#aaaaaa"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to propose a move (tile adjacent to empty space)", "Drag toward the gap to slide (where supported)", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Fifteen Tile Puzzle", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "A deterministic 15-puzzle on a 4x4 grid. The human and AI take turns sliding a tile adjacent to the empty space into the gap, with the goal of arranging tiles 1-15 in order and the empty space at the end. The UI renders on HTML5 Canvas and all logic is deterministic.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output (MUST/SHOULD/CAN)", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use simple adjacent move or random valid move strategy.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a heuristic-guided search toward the solved state.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced search with pruning and deterministic evaluation.", "type": "core"}], "state": {"board": {"cols": 4, "rows": 4, "type": "grid", "tiles": [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]], "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [4, 4], "empty_position": {"col": 3, "row": 3}}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#1e90ff", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 1, "algorithm": "random", "difficulty": "easy", "is_thinking": false, "response_delay_ms": 200}, "initial_state": {"depth": 1, "algorithm": "random", "difficulty": "easy", "is_thinking": false, "response_delay_ms": 200}}, {"name": "Board", "properties": {"cols": 4, "rows": 4, "tiles": [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 0]], "empty_position": {"col": 3, "row": 3}}, "initial_state": {}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": {"type": "integer", "allowed_values": [1, 2]}}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply move_validation and movement; update board; set last_move with player_id 1; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND move is valid per mechanics.move_validation", "parameters": ["tileRow", "tileCol"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply move_validation and movement; update board; set last_move with player_id 2; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Solvable scrambled 4x4 grid with tiles 1-15 and one empty space; the initial permutation must be solvable.", "starting_player_rule": "human"}, "capture": {"type": "none", "result": "N/A for sliding puzzle; no captures occur", "directions": [], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "none", "steps": ["N/A"], "inputs": ["tileRow", "tileCol", "current_player", "board", "parameters"], "outputs": {"affected_count": 0}, "parameters": {"directions": [], "require_bounded": false, "min_chain_length": 0}}}, "scoring": {"method": "none", "winner_determination": "End state is solved when tiles are in order with 0 at the end"}, "movement": {"range": 1, "allowed": "slide", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["tile adjacent orthogonally to the empty space", "tile value is not 0 (empty)", "parity check preserves puzzle solvability"], "must_place_on_empty": true, "validation_algorithm": {"name": "adjacency_check", "steps": ["Identify empty cell coordinates", "Verify tile is orthogonally adjacent to empty cell", "Swap tile with empty cell if valid", "Update parity and board state", "Return updated board as preview"], "inputs": ["tileRow", "tileCol", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right"], "require_bounded": true, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Board updates exactly with the swapped tile into the empty space; move_count increments; last_move records Player 1", "when": "Player performs a valid move", "given": "A valid move exists per game rules"}, {"then": "AI selects a valid adjacent move within 2 seconds and updates the board accordingly", "when": "AI calculates move", "given": "AI turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move when available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can solve in one move"}, {"then": "AI MUST not block human's direct winning path if deterministic constraints allow", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "board_solved", "check_logic": "Board matches the goal configuration (tiles in order with 0 at the end)"}], "draw": [{"priority": "end_turn", "condition": "no legal moves exist and board not solved", "check_logic": "Legal moves set is empty while board is not solved"}], "lose": [{"priority": "end_turn", "condition": "board_solved_by_ai", "check_logic": "Board matches the goal configuration and last_move by AI"}]}}