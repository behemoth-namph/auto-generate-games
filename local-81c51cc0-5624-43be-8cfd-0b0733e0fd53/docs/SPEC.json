{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner/loser/draw message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to place or rotate a tile", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Maze Runner Grid", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "A deterministic turn-based maze puzzle on a 9x9 grid where the human runner seeks a path to the exit by rotating and placing path tiles. The AI intermittently adds wandering walls to complicate connectivity, requiring the human to adapt the route in real-time.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output MUST.", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple heuristic without deep search.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate-depth search strategy.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced search with pruning and lookahead.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": "for grid: ['up','down','left','right']", "dimensions": [9, 9]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#000000", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 9, "grid": "9x9 array of path/wall tiles; each cell stores tile type, rotation, and occupancy", "rows": 9}, "initial_state": {}}, {"name": "Game", "properties": {"status": "playing", "last_move": null, "move_count": 0, "current_player": 1}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND [move validity conditions]", "parameters": ["tile_id", "rotation", "target_row", "target_col"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Runner token placed at (0,0); exit at (8,8); initial path tiles arranged to form at least one valid route; AI wandering walls inactive until after the first few human moves", "starting_player_rule": "human"}, "capture": {"type": "area_conversion", "result": "AI wandering walls are added to random empty tiles; paths may be closed or opened", "directions": ["up", "down", "left", "right"], "chain_capture": false, "min_chain_length": 2, "require_sandwich": false, "capture_algorithm": {"name": "apply_wandering_walls", "steps": ["Increment move counter to determine wandering interval", "Choose candidate empty cells based on a simple heuristic", "Place wall tiles in chosen cells", "Update board state and recalculate connectivity where needed"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 2}}}, "scoring": {"method": "path_connectivity", "winner_determination": "If human runner reaches exit, human wins; if exit becomes permanently unreachable due to walls and AI cannot create a new valid path, AI wins; draw if no legal moves exist for both players during a full round"}, "movement": {"range": 1, "allowed": "placement|rotate", "directions": ["rotate_tile", "drag_to_place"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["placement maintains at least one valid path from runner to exit after the move", "tile rotation is within allowed states", "no overlapping tiles or tiles placed outside the 9x9 grid"], "must_place_on_empty": true, "validation_algorithm": {"name": "path_check", "steps": ["Identify target cell; ensure empty slot", "Simulate tile placement/rotation", "Compute connectivity from runner to exit", "If connected, return is_valid = true with a preview of resulting path"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right"], "require_bounded": true, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Board updates accordingly and path validity is re-evaluated", "when": "Player places or rotates a tile", "given": "A valid placement exists per game rules"}, {"then": "AI uses simple heuristic and returns a valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute a winning or blocking move if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST attempt to block human's winning path", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "human_reaches_exit", "check_logic": "If the runner token occupies the exit cell (8,8) on human turn or after a valid move"}], "draw": [{"priority": "end_turn", "condition": "no_legal_moves_after_round", "check_logic": "If after a full cycle both players have no legal moves"}], "lose": [{"priority": "immediate", "condition": "ai_blocks_all_paths", "check_logic": "If there exists no valid path from runner to exit and human has exhausted legal moves"}]}}