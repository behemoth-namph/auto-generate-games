{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner/lose/draw message", "Cascade animation effects"], "board_style": {"cell_size": 45, "disc_colors": {"outline": "#aaaaaa", "player_1": "#1e90ff", "player_2": "#ff6347"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap two adjacent cells to propose a swap", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button", "Score display", "Target score", "Moves remaining"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Stack Swap Mosaic", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Two adjacent tokens swap on a 6x6 grid; matching colors in horizontal or vertical lines of three or more disappear, gravity fills gaps, and new tokens drop from the top. The player competes against an AI to reach a target score within a fixed number of moves in a deterministic, replayable puzzle loop.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "Core determinism MUST hold: all game logic is deterministic given a fixed seed; replays MUST reproduce identical outcomes.", "type": "core"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple random-adjacent-swap heuristic.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a lookahead to avoid obviously bad moves.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use a strategic search with pruning and evaluation tuning.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [6, 6]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#000000", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "owner_id": 2, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 6, "grid": "6x6 array of tokens; each cell holds a color value or null for empty", "rows": 6}, "initial_state": {}}, {"name": "Game", "properties": {"status": "playing", "ai_score": 0, "last_move": null, "max_moves": 20, "move_count": 0, "human_score": 0, "target_score": 1000, "current_player": 1}, "initial_state": {"status": "playing", "ai_score": 0, "last_move": null, "max_moves": 20, "move_count": 0, "human_score": 0, "target_score": 1000, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update board, score, and move_count; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND move is valid per mechanics.move_validation", "parameters": ["row", "col", "direction"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 2}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true, "ai_time_budget_by_difficulty": {"easy": 1000, "hard": 2000, "medium": 1500}}, "mechanics": {"setup": {"seed": 12345, "initial_placement": "Deterministic seed-based randomization to generate a 6x6 grid of colored tokens; initial layout may cascade depending on seed.", "starting_player_rule": "human"}, "capture": {"type": "line_removal", "result": "All horizontal or vertical lines of 3+ matching colors disappear; gravity pulls tokens down and new tokens fill from the top; score increases by number of tokens removed; cascades continue until stable", "directions": ["horizontal", "vertical"], "chain_capture": true, "min_chain_length": 3, "require_sandwich": false, "capture_algorithm": {"name": "apply_line_matches_and_gravity", "steps": ["Scan for horizontal and vertical runs of length >= 3", "Remove matched tokens (set to null) and update score by count", "Apply gravity to collapse columns", "Generate new tokens to fill vacated cells at the top", "Repeat until no new matches appear"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"new_board": "object", "removed_count": "int"}, "parameters": {"directions": ["horizontal", "vertical"], "chain_reaction": true, "min_chain_length": 3}}}, "scoring": {"method": "points", "description": "Points awarded for each removed token; possible multipliers for cascading clears; score tracked per player", "winner_determination": "First to reach target_score wins; if both fail to reach target within max_moves, determine winner by higher score; draw if equal"}, "movement": {"range": 1, "allowed": "swap", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after max_moves or when target_score is reached", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["swap must be between adjacent cells", "swap must result in at least one line of 3+ after resolution (or be rejected as invalid)"], "must_place_on_empty": true, "validation_algorithm": {"name": "swap_and_resolve", "steps": ["Identify adjacent swap pair", "Execute swap on a copy of the board", "Apply line-match removal for all matches length >= 3 in rows and columns", "Apply gravity to drop tokens and fill from the top", "Repeat cascade detection and removal until no new matches exist", "Compute score delta from removed tokens", "Return is_valid and resulting board view"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": true, "directions": ["up", "down", "left", "right"], "min_chain_length": 3, "resolve_chain_reactions": true}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 60, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Board updates, matches resolved, score updated accordingly", "when": "Player performs a valid swap", "given": "A valid swap exists per game rules"}, {"then": "AI uses simple algorithm, makes valid move within 2s", "when": "AI calculates move", "given": "AI turn, difficulty='easy'"}, {"then": "Game ends with human as winner", "when": "Score update occurs", "given": "Human reaches target score on their turn"}, {"then": "Draw condition triggered", "when": "max_moves reached", "given": "Both players exhaust moves without reaching target"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "human_score >= target_score", "check_logic": "If human reaches target_score, human wins; priority immediate"}], "draw": [{"priority": "end_turn", "condition": "move_count >= max_moves AND (human_score < target_score) AND (ai_score < target_score)", "check_logic": "No moves remaining and neither reached target"}], "lose": [{"priority": "immediate", "condition": "ai_score >= target_score", "check_logic": "If AI reaches target_score, AI wins (human loses); priority immediate"}]}}