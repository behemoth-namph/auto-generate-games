{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Portal Tile Swap", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Players swap adjacent tiles on a 6x6 grid to align matching portals; after each move, the AI inserts blocking tiles to impede future moves.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output (MUST / SHOULD / MAY) and deterministic outcomes.", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use [simple algorithm description].", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use [moderate algorithm description].", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use [advanced algorithm description].", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [6, 6]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#000000", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 6, "grid": "2D array of portal IDs representing tile types", "rows": 6}, "initial_state": {"grid": [["A", "B", "C", "A", "D", "B"], ["C", "A", "D", "B", "A", "C"], ["B", "C", "A", "D", "C", "A"], ["D", "B", "C", "A", "B", "D"], ["A", "D", "B", "C", "D", "A"], ["C", "A", "D", "B", "C", "A"]]}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": "int (1 or 2)"}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND [move validity conditions]", "parameters": ["row", "col"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 15}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Starting grid is predefined for determinism; no randomization on load. AI starts with the standard minimax-based evaluation. Blocking tiles will be inserted after each human move by the AI.", "starting_player_rule": "human"}, "capture": {"type": "block_placement", "result": "After a human move, AI places a blocking tile on the board to hinder future moves.", "directions": [], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "apply_block_tile", "steps": ["AI selects an empty cell using its algorithm under current seed", "Place blocking tile at chosen cell", "Mark tile as blocking so it cannot be swapped or treated as a normal portal", "Update board state"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"directions": [], "require_bounded": false, "min_chain_length": 0}}}, "scoring": {"method": "points", "winner_determination": "Player with higher score after no legal moves remain wins; if equal, draw"}, "movement": {"range": 1, "allowed": "swap", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["swap_is_adjacent", "swap_results_in_valid_alignment_considering_portal_types"], "must_place_on_empty": true, "validation_algorithm": {"name": "swap_adjacent", "steps": ["Verify target cell is within bounds", "Verify target cell is adjacent to source cell", "Simulate swap and check if any portal alignment is formed according to game rules", "Return is_valid and optional preview of resulting grid"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right"], "require_bounded": true, "min_chain_length": 2}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Board updates by swapping the two tiles; move_count increments; last_move recorded", "when": "Player performs a valid swapping move", "given": "A valid swap exists per game rules"}, {"then": "AI uses simple algorithm and makes a valid move within 2 seconds", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST attempt a winning or blocking move per its algorithm", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST attempt to block human's winning path", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "Human has strictly more points and AI has no legal moves", "check_logic": "After a turn, evaluate scores; if AI has zero legal moves and human score is greater, human wins"}], "draw": [{"priority": "end_turn", "condition": "Scores equal and no legal moves for both players", "check_logic": "If both players have no legal moves and scores tie"}], "lose": [{"priority": "immediate", "condition": "AI has strictly more points than Human", "check_logic": "At evaluation, if ai_score > human_score"}]}}