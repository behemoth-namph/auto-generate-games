{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner/loser message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Castle Gate Solitaire", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "A deterministic, turn-based puzzle where the King token must reach the green exit on a 7x7 grid by moving to adjacent empty cells or via short slides; an AI periodically inserts obstacles to raise challenge.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "MUST define explicit input/output for each action; outcomes are deterministic and replayable.", "type": "core"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple heuristic.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate-depth minimax.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced planning algorithm with pruning.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [7, 7]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#000000", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"id": 2, "type": "ai", "color": "#ffffff", "pieces_played": 0}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 7, "grid": "2D array of cell objects; each cell tracks occupantId|null and token type", "rows": 7}, "initial_state": {}}, {"name": "Game", "properties": {"status": "playing", "last_move": {}, "move_count": 0, "current_player": 1}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture (none); update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND a valid move exists", "parameters": ["sourceRow", "sourceCol", "destRow", "destCol"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "King token placed on the starting position; gates, knights, and keys distributed per a fixed 7x7 layout; green exit designated on the grid.", "starting_player_rule": "human"}, "capture": {"type": "none", "result": "No capture mechanics in base game", "directions": [], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "none", "steps": [], "inputs": [], "outputs": {"affected_count": 0}, "parameters": {}}}, "scoring": {"method": "points", "winner_determination": "Player who moves the King to the green exit wins; draw if exit remains unreachable and no moves remain"}, "movement": {"range": 1, "allowed": "step|slide", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["adjacent_to_empty_cell", "no_move_through_obstacles", "destination_misuse_prevented"], "must_place_on_empty": true, "validation_algorithm": {"name": "path_check", "steps": ["Locate token at source cell", "Verify destination is adjacent and empty", "Verify path is not blocked by obstacles", "If destination is exit cell, ensure token is King", "Return is_valid and board preview"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "State updates deterministically; move_count increments; turn passes to AI", "when": "Player performs a move", "given": "A valid move exists per rules"}, {"then": "AI uses simple heuristic and moves within time bound", "when": "AI calculates move", "given": "AI turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI SHOULD attempt to block or delay human's winning path", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "King reaches the green exit", "check_logic": "on move, if King token occupies the designated exit cell"}], "draw": [{"priority": "end_turn", "condition": "No legal moves for either side for a full round", "check_logic": "after end of turn if no moves exist"}], "lose": [{"priority": "immediate", "condition": "King is blocked with no legal moves or captured", "check_logic": "no legal moves for King or a capture occurs"}]}}