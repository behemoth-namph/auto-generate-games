{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner/loser/draw modal"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click/press restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button", "HUD: score/points, remaining goals, move count"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Orb Collector Grid", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Collect orbs by sliding them on a 7x7 grid to reach goal sockets; players alternate moves. AIs introduces shadow orbs that shift available spaces, influencing future options. Movement is either to an adjacent empty cell or sliding along a straight line to a further empty cell.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "All gameplay logic MUST be deterministic, replayable, and free of deadlocks under fixed seeds.", "type": "core"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple heuristic-based move selection.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate-depth search (e.g., minimax with pruning).", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced search strategy (e.g., minimax with deeper lookahead or MCTS).", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": "[\"up\",\"down\",\"left\",\"right\"]", "dimensions": [7, 7]}, "entities": [{"name": "Player", "properties": {"id": "1", "type": "human", "color": "#000000", "pieces_played": "int"}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 7, "grid": "2D array representation of 7x7 cells; cell values: 0=empty, 1=human orb, 2=AI orb, 3=goal_socket, 4=shadow_orb", "rows": 7}, "initial_state": {}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": "int (1 or 2)"}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND there exists at least one valid move for current player", "parameters": ["row", "col", "targetRow", "targetCol"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Each player starts with a set of orbs on their home rows; goal sockets are placed on designated sockets; the center region remains open as the playfield; empty spaces exist between placements.", "starting_player_rule": "human"}, "capture": {"type": "shadow_shift", "result": "AI shadow orbs alter available spaces after its turn, influencing future moves", "directions": ["horizontal", "vertical", "diagonal", "all"], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "apply_shadow_shift", "steps": ["Compute shadow shift using deterministic seed", "Apply shadow positions to the board", "Update available spaces and affected cells"], "inputs": ["row", "col", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"radius": "int", "directions": "array", "shuffle_seed": "string"}}}, "scoring": {"method": "points", "winner_determination": "Player with more collected/secured orbs or achieved socket goals wins; otherwise draw"}, "movement": {"range": "any for slide; 1 for step", "allowed": "slide|step", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["Target cell must be adjacent empty cell or reachable via a straight-line slide with a clear path.", "Path between start and target must be unblocked by any orb or shadow orb.", "Cannot move onto a non-empty goal socket unless the move is a valid end-state capture/win condition.", "Only the current player may move their own orbs on their turn."], "must_place_on_empty": true, "validation_algorithm": {"name": "path_check", "steps": ["Verify target is within allowed move pattern (adjacent or straight-line slide).", "Check each cell along the path is empty or capturable according to rules.", "Ensure destination is empty or permitted by end-state rules (e.g., goal socket under conditions).", "Return is_valid and a preview of resulting board state if valid."], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Captured pieces/spaces update exactly as defined", "when": "Player performs a capturing move", "given": "A valid capture exists per game rules"}, {"then": "AI uses simple algorithm, makes valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute winning move", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST block human's winning move", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "human achieves all goal sockets or accumulates sufficient points", "check_logic": "Evaluate after each move; if objectives are met, declare human win"}], "draw": [{"priority": "end_turn", "condition": "no legal moves exist for both players in a full turn or repetitive stalemate", "check_logic": "If no legal moves for current player and no progress over a full cycle, declare draw"}], "lose": [{"priority": "immediate", "condition": "AI achieves its win condition or human is unable to move on AI-only turns", "check_logic": "Evaluate after each move; if AI's win conditions met or human has no legal moves for a full turn, declare AI win"}]}}