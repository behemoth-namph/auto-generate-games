{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner/loser/draw messages"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to select and move a key", "Drag to create a move sequence", "Hover for move previews", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Dungeon Door Shuffle", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Players move keys to their matching doors on a 5x5 grid by selecting a key and dragging to an adjacent cell or along a valid sequence; AI may hide a decoy door every few turns to mislead the player.", "session_minutes": [10, 30]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output MUST define concrete preconditions, targets, and outcomes.", "type": "core"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple heuristic: choose the first valid move found.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate depth search with pruning to choose a scoring move.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced look-ahead strategy (e.g., minimax with multi-ply evaluation) and consider decoy door timing.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [5, 5]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#000000", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"id": 2, "type": "ai", "color": "#ffffff", "depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 5, "grid": "2D array of tokens; 0 = empty; positive integers = keys/doors; matching key/door pairs share an id; decoy doors flagged", "rows": 5}, "initial_state": {}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": "int (1 or 2)"}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == 'playing' AND there exists at least one valid move for Player 1", "parameters": ["move_payload"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == 'playing'", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != 'playing'", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "5x5 grid seeded with an equal number of key tokens and matching door tokens placed such that each key has a unique matching door; a subset of doors may be hidden as decoys by AI every few turns. Human (Player 1) starts first.", "starting_player_rule": "human"}, "capture": {"type": "match_placement", "result": "When a key is moved to its matching door, the key is removed and the door is considered opened; scoring increments for the player. Decoy doors may be revealed/hidden by AI as per turn rules.", "directions": ["up", "down", "left", "right"], "chain_capture": false, "min_chain_length": 1, "require_sandwich": false, "capture_algorithm": {"name": "apply_match_and_open", "steps": ["Identify all key-to-door match placements in the move sequence", "For each matched pair, remove the key token from its origin", "Mark the target door as opened and locked state updated", "Update the player's score by 1 per matched pair"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"opened_pairs": "int", "updated_board": "object"}, "parameters": {"directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 1}}}, "scoring": {"method": "points", "winner_determination": "player with the higher score when all pairs are matched or no legal moves remain; ties possible"}, "movement": {"range": "any for drag sequences; 1 for single-step moves", "allowed": "step|drag_sequence", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["the moved key must end on its matching door", "path must be a continuous sequence of adjacent cells", "no overlapping with other keys/doors except for the target door when capturing", "drag sequences must end on a valid matching door for each key moved in the sequence"], "must_place_on_empty": true, "validation_algorithm": {"name": "path_check", "steps": ["Verify selected token is a movable key belonging to current player", "Trace the proposed path for each key moved; ensure each step is within bounds and on empty cells or allowed target", "Ensure final targets are their respective matching doors", "If any move invalid, reject with error code/message"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Captured pieces updated exactly as defined (key removed, door opened, score incremented)", "when": "Player performs a capturing move", "given": "A valid capture exists per game rules"}, {"then": "AI uses simple algorithm, makes valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST avoid or block human's impending winning move when possible", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "human_pieces_matched == total_pairs", "check_logic": "All key-door pairs are successfully matched by the human side"}], "draw": [{"priority": "end_turn", "condition": "no_legal_moves_for_both_players", "check_logic": "End-turn condition where both players have zero legal moves"}], "lose": [{"priority": "immediate", "condition": "ai_pieces_matched == total_pairs", "check_logic": "All key-door pairs are successfully matched by the AI side"}]}}