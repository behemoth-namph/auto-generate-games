{"ui": {"feedback": ["Highlight selected token", "Show valid moves", "Animate clearings", "Show AI moves and weeds spawns", "Display winner/loser message"], "board_style": {"cell_size": 54, "disc_colors": {"outline": "#5a9e58", "player_1": "#2e8b57", "player_2": "#d2691e"}, "flip_animation": {"enabled": true, "duration_ms": 200}, "grid_line_color": "#2d2d2d", "last_move_highlight": {"color": "#ffd700", "enabled": true}, "valid_move_highlight": {"color": "#66cc66", "enabled": true}}, "interactions": ["Tap to select a token", "Tap adjacent empty or matching cell to move", "Hover for previews", "Click restart"], "display_elements": ["Board area with 7x7 grid", "Current player indicator (You vs AI)", "Scores and remaining tokens", "AI thinking indicator", "Status and end-of-game modal", "Restart button", "Accessibility annotations"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Garden Grid Shuffle", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Tap a flower token and move it to a matching neighboring cell to group and clear connected same-color flowers. The AI occasionally sprouts weed tokens that must be avoided.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output MUST define moves deterministically; illegal actions yield an error.", "type": "core"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple random-adjacent-move algorithm.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate-depth minimax with pruning.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced predictive search with transposition table hints.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right"], "dimensions": [7, 7]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#2e8b57", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 7, "grid": "7x7 grid with initial flower tokens distribution; internal representation as 2D array of cell objects", "rows": 7}, "initial_state": {}}, {"name": "Game", "properties": {"status": "playing", "last_move": null, "move_count": 0, "current_player": 1}, "initial_state": {"status": "playing", "last_move": null, "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND isMoveLegal(tokenId, targetRow, targetCol)", "parameters": ["tokenId", "targetRow", "targetCol"]}, {"name": "ai_move", "result": "AI calculates move using minimax; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Flowers of various colors populate the 7x7 grid with empty cells distributed to allow initial moves; no weeds at start.", "starting_player_rule": "human"}, "capture": {"type": "area_conversion", "result": "A connected cluster of same-color flowers is cleared, awarding points; any weed tokens newly spawned remain", "directions": ["up", "down", "left", "right"], "chain_capture": true, "min_chain_length": 2, "require_sandwich": false, "capture_algorithm": {"name": "apply_area_clear", "steps": ["Compute connected component of same-color tokens containing the moved token", "If size >= 2, remove them and update current_player score", "Trigger weed spawn with AI-spawn rule (non-deterministic? but deterministically seeded)"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 2}}}, "scoring": {"method": "points", "winner_determination": "Most points at end of game or clear all tokens; in tie, draw"}, "movement": {"range": 1, "allowed": "tap_move", "directions": ["up", "down", "left", "right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "none", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["target cell is empty", "target is adjacent to the chosen token", "target color matches the movable token"], "must_place_on_empty": true, "validation_algorithm": {"name": "grid_path_check", "steps": ["Verify target is empty", "Verify there exists a selected token owned by current_player", "Verify target is adjacent and color matches", "Apply grouping and clearing if a connected region of same-color tokens forms", "Update board and score accordingly"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": {}, "is_valid": true}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right"], "require_bounded": false, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 60, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "State updates accordingly and pieces may clear", "when": "Player makes a legal move", "given": "A valid move exists"}, {"then": "AI uses minimax-based algorithm within time bound and makes a valid move", "when": "AI calculates move", "given": "AI's turn"}, {"then": "AI must take winning move if available", "when": "AI's turn", "given": "AI can win in one move"}, {"then": "AI must block human's potential winning move if possible", "when": "AI's turn", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "end_turn", "condition": "player_points_win", "check_logic": "player reaches predetermined points or triggers ending condition"}], "draw": [{"priority": "end_turn", "condition": "no_legal_moves_remaining", "check_logic": "no moves exist for both players"}], "lose": [{"priority": "end_turn", "condition": "ai_points_win", "check_logic": "AI reaches predetermined points or triggers ending condition"}]}}