{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner/loser message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#000000", "player_2": "#ffffff"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Drag to move (drag-to-move enabled)", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Mini Chess Grid", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "A deterministic, turn-based 6x6 grid-chess variant. The human player selects a piece and moves to a target square; captures remove opponent pieces; turns alternate; drag-to-move is supported for tactile input.", "session_minutes": [5, 60]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output (MUST/SHOULD/CAN)", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple heuristic: pick the first legal move found.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate search (e.g., depth-limited minimax).", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced search (e.g., deeper minimax with pruning).", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right", "up-left", "up-right", "down-left", "down-right"], "dimensions": [6, 6]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#000000", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 6, "grid": "6x6 2D array; each cell is an object with {row, col, occupantId|null, visible, tags}", "rows": 6}, "initial_state": {"cols": 6, "rows": 6, "occupancy_map": [[{"col": 0, "row": 0, "tags": [], "visible": true, "occupantId": null}, {"col": 1, "row": 0, "tags": [], "visible": true, "occupantId": null}, {"col": 2, "row": 0, "tags": ["king"], "visible": true, "occupantId": "K1"}, {"col": 3, "row": 0, "tags": [], "visible": true, "occupantId": null}, {"col": 4, "row": 0, "tags": [], "visible": true, "occupantId": null}, {"col": 5, "row": 0, "tags": [], "visible": true, "occupantId": null}], [{"col": 0, "row": 1, "tags": ["pawn"], "visible": true, "occupantId": "P1-1"}, {"col": 1, "row": 1, "tags": ["pawn"], "visible": true, "occupantId": "P1-2"}, {"col": 2, "row": 1, "tags": ["pawn"], "visible": true, "occupantId": "P1-3"}, {"col": 3, "row": 1, "tags": ["pawn"], "visible": true, "occupantId": "P1-4"}, {"col": 4, "row": 1, "tags": ["pawn"], "visible": true, "occupantId": "P1-5"}, {"col": 5, "row": 1, "tags": [], "visible": true, "occupantId": null}], [{"col": 0, "row": 2, "tags": [], "visible": true, "occupantId": null}, {"col": 1, "row": 2, "tags": [], "visible": true, "occupantId": null}, {"col": 2, "row": 2, "tags": [], "visible": true, "occupantId": null}, {"col": 3, "row": 2, "tags": [], "visible": true, "occupantId": null}, {"col": 4, "row": 2, "tags": [], "visible": true, "occupantId": null}, {"col": 5, "row": 2, "tags": [], "visible": true, "occupantId": null}], [{"col": 0, "row": 3, "tags": [], "visible": true, "occupantId": null}, {"col": 1, "row": 3, "tags": [], "visible": true, "occupantId": null}, {"col": 2, "row": 3, "tags": [], "visible": true, "occupantId": null}, {"col": 3, "row": 3, "tags": [], "visible": true, "occupantId": null}, {"col": 4, "row": 3, "tags": [], "visible": true, "occupantId": null}, {"col": 5, "row": 3, "tags": [], "visible": true, "occupantId": null}], [{"col": 0, "row": 4, "tags": ["pawn"], "visible": true, "occupantId": "PAI-1"}, {"col": 1, "row": 4, "tags": ["pawn"], "visible": true, "occupantId": "PAI-2"}, {"col": 2, "row": 4, "tags": ["pawn"], "visible": true, "occupantId": "PAI-3"}, {"col": 3, "row": 4, "tags": ["pawn"], "visible": true, "occupantId": "PAI-4"}, {"col": 4, "row": 4, "tags": ["pawn"], "visible": true, "occupantId": "PAI-5"}, {"col": 5, "row": 4, "tags": [], "visible": true, "occupantId": null}], [{"col": 0, "row": 5, "tags": [], "visible": true, "occupantId": null}, {"col": 1, "row": 5, "tags": [], "visible": true, "occupantId": null}, {"col": 2, "row": 5, "tags": ["king"], "visible": true, "occupantId": "K2"}, {"col": 3, "row": 5, "tags": [], "visible": true, "occupantId": null}, {"col": 4, "row": 5, "tags": [], "visible": true, "occupantId": null}, {"col": 5, "row": 5, "tags": [], "visible": true, "occupantId": null}]]}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": "int (1 or 2)"}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND [move validity conditions]", "parameters": ["sourceRow", "sourceCol", "targetRow", "targetCol"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30, "ai_turn_time_limit_ms": 2000}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "ai_turn_time_limit_ms": 2000, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "Canonical starting state derived from occupancy_map; starting_pieces data removed. Starting arrangement mirrors both sides with pawns on row 1 and king-like pieces on row 0/5; human moves first.", "starting_player_rule": "human"}, "capture": {"type": "piece_removal", "result": "Opponent piece at target square is removed; moving piece occupies target", "directions": ["adjacent diagonals or orthogonal depending on piece"], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "remove_captured", "steps": ["Identify target cell occupancy by opponent", "Remove occupant", "Move active piece to target cell"], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"directions": ["adjacent diagonals", "orthogonals"], "require_bounded": false, "min_chain_length": 0}}}, "scoring": {"method": "count_pieces", "winner_determination": "Player with more pieces at end of game or when opponent has zero pieces wins"}, "movement": {"range": "1", "allowed": "step|slide", "directions": ["up", "down", "left", "right", "up-left", "up-right", "down-left", "down-right"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["the selected piece belongs to the current player", "target square is empty OR occupied by opponent", "target move matches the piece's move rules (king-like and pawn-like behavior in this simplified variant)", "target stays within board bounds", "move does not leave own king in check (simplified rule set)"], "pawn_orientation": {"ai": {"forward": 1, "captures": [{"dc": -1, "dr": 1}, {"dc": 1, "dr": 1}]}, "human": {"forward": -1, "captures": [{"dc": -1, "dr": -1}, {"dc": 1, "dr": -1}]}}, "must_place_on_empty": false, "validation_algorithm": {"name": "path_check", "steps": ["Ensure a piece exists at the origin and belongs to current_player", "Ensure target is within allowed movement pattern for the piece", "Ensure target is empty OR occupied by opponent", "Validate that path (if sliding) is unobstructed", "Return validity and a preview of resulting board state if valid"], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["up", "down", "left", "right", "up-left", "up-right", "down-left", "down-right"], "is_capture": true, "require_bounded": true, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Captured pieces update exactly as defined", "when": "Player performs a capturing move", "given": "A valid capture exists per game rules"}, {"then": "AI uses simple algorithm, makes valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST block human's winning move", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "human_wins", "check_logic": "human captures all AI pieces or AI has zero pieces; verify at end of turn"}], "draw": [{"priority": "end_turn", "condition": "no legal moves for both players or repetition detected or move limit reached", "check_logic": "assess at end of turn"}], "lose": [{"priority": "immediate", "condition": "ai_wins", "check_logic": "AI captures all human pieces or human has zero pieces; verify at end of turn"}]}}