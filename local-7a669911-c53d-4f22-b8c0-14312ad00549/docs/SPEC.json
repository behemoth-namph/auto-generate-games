{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner/loser/draw message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#e74c3c", "player_2": "#f1c40f"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Connect Four", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "Drop tokens into a vertical 7x6 grid by selecting a column; tokens fall to the lowest available row. The goal is to connect four tokens in a row horizontally, vertically, or diagonally before the AI does.", "session_minutes": [5, 15]}, "rules": [{"id": "R1", "text": "Clear, testable rule with input/output (MUST/SHOULD/CAN).", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use [simple algorithm description].", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use minimax with depth 4 and simple pruning.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an enhanced minimax with depth 6 and heuristic evaluation.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["up", "down", "left", "right", "up-left", "up-right", "down-left", "down-right"], "dimensions": [6, 7]}, "entities": [{"name": "Player", "properties": {"id": "1", "type": "human", "color": "#e74c3c", "pieces_played": "0"}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"id": "2", "type": "ai", "depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "player_number": 2, "response_delay_ms": 500}, "initial_state": {"id": "2", "type": "ai", "depth": 4, "algorithm": "minimax", "difficulty": "medium", "is_thinking": false, "player_number": 2, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 7, "grid": "2D array with dimensions 6x7; values: 0 = empty, 1 = human, 2 = AI", "rows": 6}, "initial_state": {}}, {"name": "Game", "properties": {"status": "string (playing|human_wins|ai_wins|draw)", "last_move": "object", "move_count": "int", "current_player": "int (1 or 2)"}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation; apply mechanics.capture (if any); update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND columnIndex is a valid move", "parameters": ["columnIndex"]}, {"name": "ai_move", "result": "AI calculates move using minimax; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "All cells start empty; no pre-filled tokens.", "starting_player_rule": "human"}, "capture": {"type": "none", "result": "No piece removal or flipping; win condition checked separately via four-in-a-row.", "directions": [], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "none", "steps": [], "inputs": [], "outputs": {}, "parameters": {}}}, "scoring": {"method": "points", "winner_determination": "The winner is the first player to form a four-in-a-row; if the board fills without any four-in-a-row, the game is a draw."}, "movement": {"range": 1, "allowed": "placement", "directions": ["down"]}, "turn_flow": {"switch_after_move": true, "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["selected column is not full", "landing row is computed by gravity (token occupies lowest available cell)"], "must_place_on_empty": true, "validation_algorithm": {"name": "drop_gravity", "steps": ["If the column's top cell is non-empty, return invalid.", "Compute landing_row as the lowest empty row in the selected column.", "Preview the board state with current player's token placed at (landing_row, col)."], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": true}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "Board updates with human token in the lowest available row in that column", "when": "Player performs a valid drop in a column", "given": "A valid placement exists per game rules"}, {"then": "AI uses simple column-first heuristic and makes a valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in one move"}, {"then": "AI MUST block human's imminent winning move if possible", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "current_player achieved four-in-a-row", "check_logic": "Scan board after every move for four consecutive tokens (horizontal, vertical, diagonal)"}], "draw": [{"priority": "end_turn", "condition": "board is full and no four-in-a-row exists", "check_logic": "No empty cells remain and no winner detected"}], "lose": [{"priority": "immediate", "condition": "opponent achieved four-in-a-row", "check_logic": "Equivalent to opponent's win condition detected after their move"}]}}