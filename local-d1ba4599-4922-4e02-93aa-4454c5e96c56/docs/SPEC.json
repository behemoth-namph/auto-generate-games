{"ui": {"feedback": ["Highlight valid moves", "Animate AI move", "Show AI thinking state", "Display winner message"], "board_style": {"cell_size": 48, "disc_colors": {"outline": "#aaaaaa", "player_1": "#1f7a1f", "player_2": "#1b4d90"}, "flip_animation": {"enabled": true, "duration_ms": 180}, "grid_line_color": "#333333", "last_move_highlight": {"color": "#ffcc00", "enabled": true}, "valid_move_highlight": {"color": "#66ccff", "enabled": true}}, "interactions": ["Click/tap to make move", "Hover for preview/hints", "Click restart button"], "display_elements": ["Board/game area", "Current player indicator (You vs AI)", "AI thinking indicator", "Game status message", "Restart button"]}, "meta": {"players": {"ai": 1, "human": 1}, "game_name": "Lantern Link", "game_type": "board", "player_mode": "player_vs_ai", "core_mechanic": "On an 8x8 grid, players slide lantern tokens along rows or columns to connect them; click to pick a lantern, then click an unobstructed line to move it tile-by-tile, or drag along a straight path. An AI introduces light-blockers to complicate routes. The game is deterministic, replayable, and UI-decoupled.", "session_minutes": [5, 60]}, "rules": [{"id": "R1", "text": "All gameplay must be deterministic and replayable given the same seed and inputs. This game does not use nondeterministic randomness in core logic.", "type": "core|validation|optional"}, {"id": "R_AI_1", "text": "AI MUST make a move within 2 seconds of its turn starting.", "type": "core"}, {"id": "R_AI_2", "text": "AI with difficulty 'easy' MUST use a simple heuristic-based slide generation.", "type": "core"}, {"id": "R_AI_3", "text": "AI with difficulty 'medium' MUST use a moderate-depth search suitable for turn-based pathfinding.", "type": "core"}, {"id": "R_AI_4", "text": "AI with difficulty 'hard' MUST use an advanced search with pruning and deterministic evaluation.", "type": "core"}], "state": {"board": {"type": "grid", "topology": "square", "neighbors": ["N", "S", "E", "W"], "dimensions": [8, 8], "cell_schema": {"id": "string", "tags": [], "coord": [0, 0], "occupantId": null, "visibility": "public"}, "cells_metadata": [{"id": "cell_0_0", "tags": ["start"], "coord": [0, 0], "occupantId": null, "visibility": "public"}]}, "entities": [{"name": "Player", "properties": {"id": 1, "type": "human", "color": "#1f7a1f", "pieces_played": 0}, "initial_state": {"pieces_played": 0}}, {"name": "AI", "properties": {"depth": 4, "algorithm": "minimax", "difficulty": "hard", "is_thinking": false, "response_delay_ms": 500}, "initial_state": {"depth": 4, "algorithm": "minimax", "difficulty": "hard", "is_thinking": false, "response_delay_ms": 500}}, {"name": "Board", "properties": {"cols": 8, "grid": "8x8 lattice of cells with occupancy states", "rows": 8}, "initial_state": {}}, {"name": "Game", "properties": {"status": "playing", "last_move": {}, "move_count": 0, "current_player": 1}, "initial_state": {"status": "playing", "move_count": 0, "current_player": 1}}]}, "turns": {"order": "Human (Player 1) → AI (Player 2) → repeat", "actions": [{"name": "player_move", "result": "Apply mechanics.move_validation and mechanics.capture; update state; switch to AI; check end conditions", "condition": "current_player == 1 AND game.status == playing AND move is valid per mechanics.move_validation", "parameters": ["row", "col", "direction", "destination"]}, {"name": "ai_move", "result": "AI calculates move using algorithm; apply mechanics.move_validation and mechanics.capture; update state; switch to human; check end conditions", "condition": "current_player == 2 AND game.status == playing", "parameters": []}, {"name": "restart", "result": "Reset all state to initial values", "condition": "game.status != playing", "parameters": []}], "max_time_seconds": 30}, "config": {"show_ai_thinking": true, "default_difficulty": "medium", "ai_response_delay_ms": 500, "allow_difficulty_change": true}, "mechanics": {"setup": {"initial_placement": "A symmetric starter layout places a subset of lantern tokens for the human player on accessible cells along the front rows, with empty spaces enabling initial slides. AI lights are not blocking at setup but will be introduced progressively by the AI on its turns.", "starting_player_rule": "human"}, "capture": {"type": "none", "result": "No captures occur in Lantern Link; goal is connectivity of lanterns via valid slides", "directions": [], "chain_capture": false, "min_chain_length": 0, "require_sandwich": false, "capture_algorithm": {"name": "none", "steps": [], "inputs": ["row", "col", "current_player", "board", "parameters"], "outputs": {"affected_count": "int"}, "parameters": {"directions": [], "require_bounded": false, "min_chain_length": 0}}}, "scoring": {"method": "points", "winner_determination": "At end, the player with more connected lanterns (via valid slides) wins; equal counts result in a draw."}, "movement": {"range": "unbounded", "allowed": "slide", "directions": ["north", "south", "east", "west"]}, "turn_flow": {"switch_after_move": true, "extra_turn_conditions": "end game after two consecutive passes", "pass_if_no_valid_move": true}, "move_validation": {"validity_checks": ["move originates from a lantern owned by the current player", "destination is empty", "movement is along a single row or a single column", "path between origin and destination is clear of blockers and other lanterns"], "must_place_on_empty": true, "validation_algorithm": {"name": "path_check", "steps": ["Verify a lantern belonging to current_player exists at (row, col).", "Determine direction and trace a straight line to the target cell.", "Ensure all intermediate cells are empty and within board bounds.", "Destination must be empty; if valid, return new coordinates as preview.", "Return is_valid = true with preview of resulting board state."], "inputs": ["row", "col", "current_player", "board"], "outputs": {"preview": "object", "is_valid": "boolean"}, "parameters": {"gravity": false, "directions": ["north", "south", "east", "west"], "require_bounded": true, "min_chain_length": 1}}}}, "technical": {"platform": "HTML5 Canvas", "performance": {"target_fps": 30, "max_load_time_ms": 1000, "max_ai_think_time_ms": 2000}}, "acceptance": [{"then": "Expected result with specific values", "when": "Human action performed", "given": "Initial state description"}, {"then": "State updates reflect the slide, and last_move is recorded", "when": "Player performs a valid sliding move", "given": "A valid move exists per game rules"}, {"then": "AI uses simple heuristic, makes a valid move within 2s", "when": "AI calculates move", "given": "AI's turn, difficulty='easy'"}, {"then": "AI MUST execute a winning move if available", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "AI can win in 1 move"}, {"then": "AI MUST attempt to block human's potential winning move", "when": "AI's turn, difficulty='medium' or 'hard'", "given": "Human can win next turn"}], "end_conditions": {"win": [{"priority": "immediate", "condition": "Human lanterns connected", "check_logic": "All human lanterns are connected through a chain of valid slides with no blockers interrupting the chain"}], "draw": [{"priority": "end_turn", "condition": "No legal moves for either side for a full round", "check_logic": "End of a complete cycle with no legal moves detected for both players"}], "lose": [{"priority": "end_turn", "condition": "AI blocks all human moves", "check_logic": "On human turn, there are zero legal moves available for the human player"}]}}